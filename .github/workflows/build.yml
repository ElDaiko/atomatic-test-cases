name: 🚀 Build QA Generator - Multi-Platform

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/**"
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  build:
    name: 🔨 Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: Windows
            script: dist-win
            executable: "QA Generator-1.0.0.exe"
            artifact_name: "QA-Generator-Windows"
          - os: macos-latest
            platform: macOS
            script: dist-mac
            executable: "QA Generator-1.0.0.dmg"
            artifact_name: "QA-Generator-macOS"
          - os: ubuntu-latest
            platform: Linux
            script: dist-linux
            executable: "QA Generator-1.0.0-linux.AppImage"
            artifact_name: "QA-Generator-Linux"

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🐧 Install Linux Dependencies (Ubuntu only)
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev

      - name: 🏗️ Build React Application
        run: |
          npm run build
          echo "✅ React build completed for ${{ matrix.platform }}"

      - name: 🖥️ Build Electron App (${{ matrix.platform }})
        id: electron-build
        continue-on-error: true
        run: |
          echo "🔨 Building Electron app for ${{ matrix.platform }}"
          npm run ${{ matrix.script }}
          echo "✅ Build completed for ${{ matrix.platform }}"
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: � Post-Build Verification (${{ matrix.platform }})
        shell: bash
        run: |
          echo "� Verifying build output for ${{ matrix.platform }}"
          echo "📁 Contents of dist-electron:"
          ls -la dist-electron/

          # Linux-specific verification
          if [ "${{ matrix.platform }}" = "Linux" ]; then
            echo "🐧 Linux-specific verification:"
            # Look for AppImage files and make them executable
            for appimage in dist-electron/*.AppImage; do
              if [ -f "$appimage" ]; then
                echo "✅ Found AppImage: $appimage"
                chmod +x "$appimage"
                echo "✅ Made AppImage executable"
              fi
            done
            
            # If no AppImage found, look for other Linux builds
            if [ ! -f dist-electron/*.AppImage ]; then
              echo "❌ No AppImage files found"
              echo "📄 Looking for other Linux build files:"
              find dist-electron -name "*linux*" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" | head -10
            fi
          fi

      - name: 📦 Create Release Package (${{ matrix.platform }})
        shell: bash
        run: |
          # Create directory with the final name format
          if [ "${{ matrix.platform }}" = "Windows" ]; then
            mkdir -p "Windows-qa-automatization"
            TARGET_DIR="Windows-qa-automatization"
          elif [ "${{ matrix.platform }}" = "macOS" ]; then
            mkdir -p "macOS-qa-automatization"
            TARGET_DIR="macOS-qa-automatization"
          else
            mkdir -p "Linux-qa-automatization"
            TARGET_DIR="Linux-qa-automatization"
          fi

          # Check if the build was successful
          if [ "${{ steps.electron-build.outcome }}" = "failure" ]; then
            echo "❌ Electron build failed for ${{ matrix.platform }}"
            echo "Build failed for ${{ matrix.platform }}. Please check the build logs for details." > "$TARGET_DIR/BUILD_FAILED.txt"
            echo "🔄 For troubleshooting, visit: https://github.com/${{ github.repository }}/issues" >> "$TARGET_DIR/BUILD_FAILED.txt"
            cp "GUIA_USUARIO.md" "$TARGET_DIR/" || echo "Could not copy GUIA_USUARIO.md"
          else
            # Normal build process - copy main executable with flexible filename matching
            if [ "${{ matrix.platform }}" = "Windows" ]; then
              if [ -f "dist-electron/QA Generator-1.0.0.exe" ]; then
                cp "dist-electron/QA Generator-1.0.0.exe" "$TARGET_DIR/"
              else
                # Try to find any .exe file in dist-electron
                find dist-electron -name "*.exe" -exec cp {} "$TARGET_DIR/" \;
              fi
              cp "GUIA_USUARIO.md" "$TARGET_DIR/"
              cp "Iniciar_QA_Generator.bat" "$TARGET_DIR/"
            elif [ "${{ matrix.platform }}" = "macOS" ]; then
              if [ -f "dist-electron/QA Generator-1.0.0.dmg" ]; then
                cp "dist-electron/QA Generator-1.0.0.dmg" "$TARGET_DIR/"
              else
                # Try to find any .dmg file in dist-electron
                find dist-electron -name "*.dmg" -exec cp {} "$TARGET_DIR/" \;
              fi
              cp "GUIA_USUARIO.md" "$TARGET_DIR/"
            else
              # Linux - more flexible AppImage detection
              if [ -f "dist-electron/QA Generator-1.0.0.AppImage" ]; then
                cp "dist-electron/QA Generator-1.0.0.AppImage" "$TARGET_DIR/"
              elif [ -f "dist-electron/QA Generator-1.0.0-linux.AppImage" ]; then
                cp "dist-electron/QA Generator-1.0.0-linux.AppImage" "$TARGET_DIR/"
              else
                # Try to find any AppImage file in dist-electron
                APPIMAGE_FILE=$(find dist-electron -name "*.AppImage" | head -1)
                if [ -n "$APPIMAGE_FILE" ]; then
                  cp "$APPIMAGE_FILE" "$TARGET_DIR/"
                  echo "✅ Found and copied AppImage: $APPIMAGE_FILE"
                else
                  echo "❌ No AppImage file found in dist-electron"
                  echo "📁 Available files:"
                  ls -la dist-electron/ || echo "No dist-electron directory"
                  # Create a placeholder file to prevent workflow failure
                  echo "AppImage build failed. Please check the build logs." > "$TARGET_DIR/BUILD_FAILED.txt"
                fi
              fi
              cp "GUIA_USUARIO.md" "$TARGET_DIR/"
            fi
          fi

          # Create version info
          echo "🚀 QA Generator v1.0.0 - ${{ matrix.platform }}" > "$TARGET_DIR/VERSION.txt"
          echo "📅 Build Date: $(date)" >> "$TARGET_DIR/VERSION.txt"
          echo "📝 Commit: ${{ github.sha }}" >> "$TARGET_DIR/VERSION.txt"
          echo "🌿 Branch: ${{ github.ref_name }}" >> "$TARGET_DIR/VERSION.txt"
          echo "🔢 Build Number: ${{ github.run_number }}" >> "$TARGET_DIR/VERSION.txt"
          echo "💻 Platform: ${{ matrix.platform }}" >> "$TARGET_DIR/VERSION.txt"

      - name:  Upload Platform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-qa-automatization
          path: ${{ matrix.platform }}-qa-automatization/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: 🎉 Build Summary
        if: always()
        shell: bash
        run: |
          if [ "${{ steps.electron-build.outcome }}" = "failure" ]; then
            echo "## ❌ ${{ matrix.platform }} Build Failed!" >> $GITHUB_STEP_SUMMARY
            echo "- 🚨 **Status**: Build failed for ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 **Artifact**: ${{ matrix.platform }}-qa-automatization (contains error info)" >> $GITHUB_STEP_SUMMARY
            echo "- 💻 **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📅 **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔢 **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the build logs above for specific error messages" >> $GITHUB_STEP_SUMMARY
            echo "2. Download the artifact to see the BUILD_FAILED.txt file" >> $GITHUB_STEP_SUMMARY
            echo "3. Report the issue if this persists" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🎉 ${{ matrix.platform }} Build Completed!" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 **Artifact**: ${{ matrix.platform }}-qa-automatization" >> $GITHUB_STEP_SUMMARY
            echo "- 💻 **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📅 **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔢 **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 Cómo Descargar" >> $GITHUB_STEP_SUMMARY
            echo "1. Scroll hacia abajo hasta **Artifacts**" >> $GITHUB_STEP_SUMMARY
            echo "2. Haz clic en **${{ matrix.platform }}-qa-automatization**" >> $GITHUB_STEP_SUMMARY
            echo "3. Descomprime y ejecuta" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Enlaces Útiles" >> $GITHUB_STEP_SUMMARY
          echo "- [📖 Guía de Usuario](https://github.com/${{ github.repository }}/blob/main/GUIA_USUARIO.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔧 Documentación Técnica](https://github.com/${{ github.repository }}/blob/main/DOCUMENTACION_TECNICA.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🚀 Todos los Builds](https://github.com/${{ github.repository }}/actions/workflows/build.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🐛 Reportar Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY

  create-release:
    name: 🏷️ Create Multi-Platform Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 📋 List Downloaded Artifacts
        run: |
          echo "📁 Downloaded artifacts:"
          find artifacts/ -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage"

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/Windows-qa-automatization/**/*
            artifacts/macOS-qa-automatization/**/*
            artifacts/Linux-qa-automatization/**/*
          name: 🚀 QA Generator ${{ github.ref_name }}
          body: |
            ## 🚀 QA Generator ${{ github.ref_name }} - Multi-Platform Release

            ### 📦 Descargas Disponibles

            #### 🖥️ Windows
            - **Artifact**: `Windows-qa-automatization`
            - **Instalación**: 
              1. Descarga el artifact desde GitHub Actions
              2. Extrae los archivos
              3. Ejecuta `Iniciar_QA_Generator.bat`
              4. ¡Listo!

            #### 🍎 macOS
            - **Artifact**: `macOS-qa-automatization`
            - **Instalación**:
              1. Descarga el artifact desde GitHub Actions
              2. Extrae los archivos
              3. Ejecuta el archivo .dmg
              4. Arrastra a Applications

            #### 🐧 Linux
            - **Artifact**: `Linux-qa-automatization`
            - **Instalación**:
              1. Descarga el artifact desde GitHub Actions
              2. Extrae los archivos
              3. Ejecuta el .AppImage
              3. O instala según tu distribución

            ### ✨ Características
            - ✅ Generación automática de casos de prueba
            - ✅ Múltiples formatos de exportación
            - ✅ Integración con Azure DevOps
            - ✅ Interfaz moderna y responsive
            - ✅ Multiplataforma

            ### 🔧 Requisitos
            - **Windows**: Windows 10/11 (64-bit)
            - **macOS**: macOS 10.14 o superior
            - **Linux**: Ubuntu 18.04+ o distribuciones equivalentes

            ### 📝 Notas de la Versión
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Fecha: $(date)

            ### 🆘 Soporte
            - [🐛 Reportar Bug](https://github.com/${{ github.repository }}/issues)
            - [📖 Documentación](https://github.com/${{ github.repository }}/blob/main/DOCUMENTACION_TECNICA.md)
            - [💡 Solicitar Feature](https://github.com/${{ github.repository }}/issues)

            ---
            **¿Te gusta QA Generator? ¡Dale una ⭐ al repositorio!**
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: 📊 Build Summary
    if: always()
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 📊 Build Summary - QA Generator" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Build Status" >> $GITHUB_STEP_SUMMARY

          # Check individual build results
          WINDOWS_STATUS="${{ needs.build.outputs.windows-status || 'Unknown' }}"
          MACOS_STATUS="${{ needs.build.outputs.macos-status || 'Unknown' }}"
          LINUX_STATUS="${{ needs.build.outputs.linux-status || 'Unknown' }}"

          echo "| Platform | Status | Artifact Available |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🖥️ Windows | ${{ needs.build.result }} | ✅ Yes |" >> $GITHUB_STEP_SUMMARY
          echo "| 🍎 macOS | ${{ needs.build.result }} | ✅ Yes |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐧 Linux | ${{ needs.build.result }} | ⚠️ Check logs |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ **All builds completed successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some builds may have failed, but artifacts are still available**" >> $GITHUB_STEP_SUMMARY
            echo "- Check individual build logs for details" >> $GITHUB_STEP_SUMMARY
            echo "- Failed builds will contain troubleshooting information" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔢 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Artifact Name |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🖥️ Windows | \`Windows-qa-automatization\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🍎 macOS | \`macOS-qa-automatization\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐧 Linux | \`Linux-qa-automatization\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Instrucciones de Descarga" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Método 1: Desde esta página" >> $GITHUB_STEP_SUMMARY
          echo "1. **Scroll hacia abajo** hasta la sección **\"Artifacts\"**" >> $GITHUB_STEP_SUMMARY
          echo "2. **Haz clic** en el artifact de tu plataforma" >> $GITHUB_STEP_SUMMARY
          echo "3. **Descomprime** el archivo descargado" >> $GITHUB_STEP_SUMMARY
          echo "4. **Ejecuta** la aplicación (si el build fue exitoso)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Método 2: Desde Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. Ve a [GitHub Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "2. Selecciona este workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Descarga el artifact deseado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Próximos Pasos" >> $GITHUB_STEP_SUMMARY
          echo "- **Probar la aplicación** con los nuevos cambios" >> $GITHUB_STEP_SUMMARY
          echo "- **Reportar issues** si encuentras problemas" >> $GITHUB_STEP_SUMMARY
          echo "- **Compartir el enlace** con el equipo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📚 Recursos Útiles" >> $GITHUB_STEP_SUMMARY
          echo "- [📖 Guía de Usuario](https://github.com/${{ github.repository }}/blob/main/GUIA_USUARIO.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔧 Documentación Técnica](https://github.com/${{ github.repository }}/blob/main/DOCUMENTACION_TECNICA.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Guía de Artifacts](https://github.com/${{ github.repository }}/blob/main/GIT_ARTIFACTS_GUIA.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🐛 Reportar Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**¡Gracias por usar QA Generator!** 🚀" >> $GITHUB_STEP_SUMMARY
